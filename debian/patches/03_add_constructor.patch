Description: Patch from upstream CVS to fix building of excalibur-logger against
 this package.
Forwarded: not-needed
Author: Onkar Shinde <onshinde@ubuntu.com>
--- a/src/java/org/apache/log/output/net/SMTPOutputLogTarget.java	2011-05-29 14:56:34.000000000 +0530
+++ b/src/java/org/apache/log/output/net/SMTPOutputLogTarget.java	2011-05-29 14:56:59.000000000 +0530
@@ -58,6 +58,23 @@
 
     // Buffer containing current mail
     private StringBuffer m_buffer;
+    
+    /** The time that the first log entry in the current buffer arrived. */
+    private long m_bufferTime;
+    
+    /** The maximun delay that a message will be allowed to wait in the queue
+     *   before being sent. */
+    private long m_maxDelayTime;
+    
+    /** Runner thread which is responsible for sending batched log entries in
+     * the background. */
+    private Thread m_runner;
+    
+    /** Flag which will be set in the close method when it is time to shutdown. */
+    private boolean m_shutdown;
+    
+    /** Flag which controls whether debug is enabled for each message. */
+    private boolean m_debug;
 
     /** SMTPOutputLogTarget constructor.
      *
@@ -68,7 +85,17 @@
      * @param toAddresses addresses logs should be sent to
      * @param fromAddress address logs say they come from
      * @param subject subject line logs should use
-     * @param maxMsgSize maximum size of any log mail, in units of log events
+     * @param maxMsgSize maximum size of any log mail, in units of log events.
+     *                   If this is greater than one but maxDelayTime is 0 then
+     *                   log events may stay queued for a long period of time
+     *                   if less than the specified number of messages are
+     *                   logged.  Any unset messages will be sent when the
+     *                   target is closed.
+     * @param maxDelayTime specifies the longest delay in seconds that a log
+     *                     entry will be queued before being sent.  Setting
+     *                     this to a value larger than 0 will cause a
+     *                     background thread to be used to queue up and send
+     *                     messages.  Ignored if maxMsgSize is 1 or less.
      * @param formatter log formatter to use
      */
     public SMTPOutputLogTarget(
@@ -77,6 +104,7 @@
         final Address fromAddress,
         final String subject,
         final int maxMsgSize,
+        final int maxDelayTime,
         final Formatter formatter )
     {
         super( formatter );
@@ -87,11 +115,103 @@
         m_fromAddress = fromAddress;
         m_subject = subject;
         m_session = session;
+        m_maxDelayTime = maxDelayTime * 1000;
+        
+        if ( ( m_maxDelayTime > 0 ) && ( m_maxMsgSize > 1 ) ) 
+        {
+            // Create a runner thread which will
+            m_runner = new Thread( "SMTPOutputLogTarget_Queue_Daemon" )
+            {
+                public void run()
+                {
+                    try
+                    {
+                        //System.out.println( "SMTPOutputLogTarget runner Started." );
+                        synchronized( SMTPOutputLogTarget.this )
+                        {
+                            try
+                            {
+                                do
+                                {
+                                    // Wait up to a second for notification that a message is
+                                    //  available.
+                                    try
+                                    {
+                                        SMTPOutputLogTarget.this.wait( 1000 );
+                                    }
+                                    catch ( InterruptedException e )
+                                    {
+                                        // Ignore.
+                                    }
+                                    
+                                    // Is a message waiting?
+                                    if ( m_message != null )
+                                    {
+                                        // Is the message big enough to send or been
+                                        //  waiting long enough?
+                                        long now = System.currentTimeMillis();
+                                        if ( m_shutdown || ( m_msgSize >= m_maxMsgSize ) ||
+                                            ( now - m_bufferTime >= m_maxDelayTime ) )
+                                        {
+                                            // Time to send the message.
+                                            send();
+                                        }
+                                    }
+                                }
+                                while ( !m_shutdown );
+                            }
+                            finally
+                            {
+                                //System.out.println( "SMTPOutputLogTarget runner Completed." );
+                                m_runner = null;
+                                
+                                // The close method waits for this to complete.
+                                SMTPOutputLogTarget.this.notifyAll();
+                            }
+                        }
+                    }
+                    catch ( Throwable t )
+                    {
+                        getErrorHandler().error(
+                            "Unexpected error in the SMTPOutputLogTarget queue daemon", t, null );
+                    }
+                }
+            };
+            m_runner.setDaemon( true );
+            m_runner.start();
+        }
 
         // ready for business
         open();
     }
 
+    /** SMTPOutputLogTarget constructor.
+     *
+     * It creates a logkit output target capable of logging to SMTP 
+     * (ie. email, email gateway) targets.
+     *
+     * @param session mail session to be used
+     * @param toAddresses addresses logs should be sent to
+     * @param fromAddress address logs say they come from
+     * @param subject subject line logs should use
+     * @param maxMsgSize maximum size of any log mail, in units of log events.
+     *                   Log events may stay queued for a long period of time
+     *                   if less than the specified number of messages are
+     *                   logged.  Any unset messages will be sent when the
+     *                   target is closed.
+     * @param formatter log formatter to use
+     */
+    public SMTPOutputLogTarget(
+        final Session session,
+        final Address[] toAddresses,
+        final Address fromAddress,
+        final String subject,
+        final int maxMsgSize,
+        final Formatter formatter )
+    {
+        this( session, toAddresses, fromAddress, subject, maxMsgSize, 0, formatter );
+    }
+
     /** Method to write data to the log target. 
      * 
      * Logging data is stored in
